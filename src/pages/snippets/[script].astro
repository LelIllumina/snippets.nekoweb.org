---
import { getCollection, render } from "astro:content";
import Rendered from "@layouts/Rendered.astro";
import "@styles/post.css";
import "remark-github-blockquote-alert/alert.css";

export async function getStaticPaths() {
  const scripts = await getCollection("scripts");
  const authors = await getCollection("authors"); // Fetch the authors collection

  const paths = scripts.map((entry) => {
    const authorReference = entry.data.author;
    const authorData = authors.find(
      (author) => author.id === authorReference.id,
    );

    return {
      params: { script: entry.id },
      props: {
        entry,
        author: authorData || null, // Pass the resolved author or null if not found
      },
    };
  });

  return paths;
}

const { entry, author } = Astro.props;
const { Content } = await render(entry);
---

<Rendered
  title={entry.data.title}
  desc={entry.data.description}
  og=`/og/scripts/${entry.id}.png`
>
  <h1 class="font-sans-alt">{entry.data.title}</h1>
  <div class="pb-4 [&>*]:inline [&>*]:px-2">
    <a class="text-slate-500 no-underline" href=`/author/${author?.data.name}`
      >By {author?.data.name}</a
    >
    <p>|</p>
    {entry.data.categories.map((str) => <p>{str}</p>)}
    {
      entry.data.edited && (
        <>
          <p>|</p>
          <p>
            Edited from source
            <span
              title="This script was edited enough to be marked as edited"
              class="m-0 cursor-help p-0 opacity-50"
            >
              ðŸ›ˆ
            </span>
          </p>
        </>
      )
    }
    <a class="float-right" href={author?.data.site}>Source</a>
  </div>
  <article><Content /></article>
</Rendered>
